pragma circom 2.0.0;

template MIMC5Feistel() {
    signal input iL;
    signal input iR;
    signal input k;

    signal output oL;
    signal output oR;

    var nRounds = 20;
    var c[20] = [
        0,
        34438106586071573963303856853684777371529535076516594333647802953378152056690,
        90330491003210503096884294189090688440505297815367350563894138917519020765760,
        103512063287501042870528732978723266407479405869217803874273388290102010361182,
        47529500492544391855153332027047419724382180416443908072428133446686110244469,
        51061477874974237429465849973459307141528961497662966477476039197757502020793,
        92963976780566711186604599120203601449726712533188869707899346837932467241591,
        4058767248769207584743305473953549115747250216508199863641490131383068039583,
        98722848806094565097140517838942180103862227605597015827483870176477469178265,
        63760013470677679325771474665710264101780755807690950703037058667131235339622,
        93041424756423550938764837177612873858999259247733118021958870340025570563069,
        3829463457929264529628324491414476503454828962170134132345797694280743969754,
        80517541415872580307517218697355463590731750661145832496341956969733683806322,
        64803236575301326398361494759674664579226365517340219938106983741718195791430,
        82819052478274631593556092157368334973025143592874205006435513710422152036871,
        11679211998151104976816092410631403319701841381349755260458853154535545195708,
        96188532229051040668083554301552901780214674727880936910856964395895069955781,
        111110621318222943163703916512746703854328614503165285756621486682318279079337,
        110461169213336560056797519445527415036489050530585258285652743165639725374613,
        12096287373909808688808789363742136403841796673422871499493947625395576993716
    ];

    signal lastOutputL[nRounds + 1];
    signal lastOutputR[nRounds + 1];

    var base[nRounds];
    signal base2[nRounds];
    signal base4[nRounds];

    lastOutputL[0] <== iL;
    lastOutputR[0] <== iR;

    for(var i = 0; i < nRounds; i++){
        base[i] = lastOutputR[i] + k + c[i];
        base2[i] <== base[i] * base[i];
        base4[i] <== base2[i] * base2[i];

        lastOutputR[i + 1] <== lastOutputL[i] + base4[i] * base[i];
        lastOutputL[i + 1] <== lastOutputR[i];
    }

    oL <== lastOutputL[nRounds];
    oR <== lastOutputR[nRounds];
}

template MiMC5Sponge(nInputs) {
    signal input k;
    signal input ins[nInputs];
    signal output o;

    signal lastR[nInputs + 1];
    signal lastC[nInputs + 1];

    lastR[0] <== 0;
    lastC[0] <== 0;

    component layers[nInputs];

    for(var i = 0; i < nInputs; i++) {
        layers[i] = MIMC5Feistel();
        layers[i].iL <== lastR[i] + ins[i];
        layers[i].iR <== lastC[i];
        layers[i].k <== k;

        lastR[i + 1] <== layers[i].oL;
        lastC[i + 1] <== layers[i].oR;
    }

    o <== lastR[nInputs];
}

// component main = MIMC5Sponge(2);
